/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CommentPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var CommentPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Plugin de Coment\xE1rio Carregado!");
    this.injectStyles();
    this.addCommand({
      id: "add-comment",
      name: "Adicionar Coment\xE1rio",
      hotkeys: [{ modifiers: ["Ctrl"], key: "+" }],
      editorCallback: this.addComment.bind(this)
    });
    this.addCommand({
      id: "remove-comment",
      name: "Remover Coment\xE1rio",
      hotkeys: [{ modifiers: ["Ctrl"], key: "-" }],
      editorCallback: this.removeComment.bind(this)
    });
    this.registerDomEvent(document, "mouseover", this.handleMouseOver.bind(this));
    this.registerDomEvent(document, "mouseout", this.handleMouseOut.bind(this));
  }
  injectStyles() {
    const style = document.createElement("style");
    style.textContent = `
      .comment {
        border-bottom: 2px dashed #4a90e2;
        color: #ffffff;
        font-style: italic;
        cursor: pointer;
        transition: all 0.3s ease;
      }
      .comment:hover {
        border-bottom-color: #357abd;
        background-color: rgba(255, 255, 255, 0.1);
      }
      .comment-tooltip {
        background-color: #1e1e1e;
        border: 1px solid #444444;
        color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 10px;
        font-family: Arial, sans-serif;
        font-size: 14px;
        z-index: 9999;
      }
      .comment-button {
        background-color: #1e1e1e;
        color: #ffffff;
        border: 1px solid #353535;
        border-radius: 4px;
        padding: 5px 10px;
        cursor: pointer;
        margin-top: 5px;
        transition: background-color 0.3s ease;
      }
      .comment-button:hover {
        background-color: #181818;
      }
    `;
    document.head.appendChild(style);
  }
  addComment(editor) {
    const selectedText = editor.getSelection();
    if (!selectedText) {
      new import_obsidian.Notice("Selecione um texto para comentar.");
      return;
    }
    new CommentModal(this.app, (comment) => {
      editor.replaceSelection(`<span class="comment" data-comment="${comment}" style="border-bottom: 1px dotted; cursor: pointer;">${selectedText}</span>`);
    }).open();
  }
  removeComment(editor) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    editor.replaceRange(line.replace(/<span class="comment"[^>]*>(.*?)<\/span>/g, "$1"), { line: cursor.line, ch: 0 }, { line: cursor.line, ch: line.length });
  }
  handleMouseOver(evt) {
    const target = evt.target;
    if (target instanceof HTMLElement && target.classList.contains("comment")) {
      this.showTooltip(target, target.getAttribute("data-comment") || "");
    }
  }
  handleMouseOut(evt) {
    const relatedTarget = evt.relatedTarget;
    if (!relatedTarget || !relatedTarget.closest(".comment") && !relatedTarget.closest(".comment-tooltip")) {
      this.hideTooltip();
    }
  }
  showTooltip(target, comment) {
    var _a;
    const tooltip = document.createElement("div");
    tooltip.classList.add("comment-tooltip");
    tooltip.innerHTML = `<div class="comment-tooltip-content"><p>${comment}</p><button class="comment-button edit-comment">Editar</button></div>`;
    Object.assign(tooltip.style, {
      position: "absolute",
      top: `${target.getBoundingClientRect().top - 80}px`,
      left: `${target.getBoundingClientRect().left + 20}px`,
      pointerEvents: "all"
    });
    document.body.appendChild(tooltip);
    (_a = tooltip.querySelector(".edit-comment")) == null ? void 0 : _a.addEventListener("click", () => {
      this.editComment(target, comment, tooltip);
    });
  }
  hideTooltip() {
    document.querySelectorAll(".comment-tooltip").forEach((tooltip) => tooltip.remove());
  }
  editComment(target, comment, tooltip) {
    new EditCommentModal(this.app, comment, (newComment) => {
      if (newComment) {
        target.setAttribute("data-comment", newComment);
        tooltip.querySelector("p").textContent = newComment;
      }
      tooltip.remove();
    }).open();
  }
};
var CommentModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    this.contentEl.createEl("h2", { text: "Adicionar Coment\xE1rio" });
    const input = this.createInput();
    this.createButton("Salvar", () => {
      const newComment = input.value.trim();
      if (newComment) {
        this.onSubmit(newComment);
        this.close();
      } else {
        new import_obsidian.Notice("Por favor, insira um coment\xE1rio.");
      }
    });
  }
  createInput() {
    const input = this.contentEl.createEl("textarea", { placeholder: "Digite seu coment\xE1rio..." });
    Object.assign(input.style, { width: "100%", height: "100px" });
    return input;
  }
  createButton(text, onClick) {
    const button = this.contentEl.createEl("button", { text });
    button.classList.add("comment-button");
    button.addEventListener("click", onClick);
    this.contentEl.appendChild(button);
  }
  onClose() {
    this.contentEl.empty();
  }
};
var EditCommentModal = class extends CommentModal {
  constructor(app, currentComment, onSubmit) {
    super(app, onSubmit);
    this.currentComment = currentComment;
  }
  onOpen() {
    this.contentEl.createEl("h2", { text: "Editar Coment\xE1rio" });
    const input = this.createInput();
    input.value = this.currentComment;
    this.createButton("Salvar", () => {
      const newComment = input.value.trim();
      if (newComment) {
        this.onSubmit(newComment);
        this.close();
      } else {
        new import_obsidian.Notice("Por favor, insira um coment\xE1rio.");
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
